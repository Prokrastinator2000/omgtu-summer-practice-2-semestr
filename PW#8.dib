#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}

public interface ICommand
{
    void Execute(ServerThread serverThread);
    int Count { get; set; }
}

public class Scheduler : IScheduler
{
    ConcurrentQueue<ICommand> commandQueue = new ConcurrentQueue<ICommand>();

    public bool HasCommand()
    {
        return !commandQueue.IsEmpty;
    }

    public ICommand Select()
    {
        if (commandQueue.TryDequeue(out ICommand command) && command.Count > 0)
        {
            return command;
        }
        return null;
    }

    public void Add(ICommand cmd)
    {
        commandQueue.Enqueue(cmd);
    }
}

public class ServerThread
{
    IScheduler scheduler;
    Thread thread;
    bool running = true; //для soft завершения
    bool hardStop = false; //для hard завершения

    public ServerThread(IScheduler scheduler)
    {
        this.scheduler = scheduler;
        thread = new Thread(Run); //инициализация потока
        thread.Start();
    }

    public void Run()
    {
        while (running || (scheduler.HasCommand() && !hardStop))
        {
            ICommand command = scheduler.Select();
            if (command != null)
            {
                try
                {
                    command.Execute(this);
                    command.Count--; // Уменьшаем Count после выполнения
                    if (command.Count > 0)
                    {
                        scheduler.Add(command);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Исключение: {ex.Message}");
                }
            }
            else
            {
                Thread.Sleep(10);
            }
        }
        Console.WriteLine("Поток остановлен.");
    }

    public void Stop() //метод для soft завершения
    {
        running = false;
    }

    public void HardStop() //метод для hard завершения
    {
        hardStop = true;
    }

    public Thread GetThread() => thread; //возвращает поток
}

public class HardStopCommand : ICommand
{
    ServerThread targetThread;
    public int Count { get; set; } = 1;

    public HardStopCommand(ServerThread targetThread) //конструктор
    {
        this.targetThread = targetThread;
    }

    public void Execute(ServerThread serverThread)
    {
        if (Thread.CurrentThread == targetThread.GetThread()) //проверка выполнения команды в нужном потоке
        {
            Console.WriteLine("Исполнение hard завершения потока");
            targetThread.HardStop();
            targetThread.Stop();
        }
        else
        {
            throw new InvalidOperationException("Исполнение hard завершения потока может быть произведено только в данном потоке.");
        }
    }
}

public class SoftStopCommand : ICommand
{
    ServerThread targetThread;
    public int Count { get; set; } = 1;

    public SoftStopCommand(ServerThread targetThread)
    {
        this.targetThread = targetThread;
    }

    public void Execute(ServerThread serverThread)
    {
        if (Thread.CurrentThread == targetThread.GetThread()) //проверка выполнения команды в нужном потоке
        {
            Console.WriteLine("Исполнение soft завершения потока");
            targetThread.Stop();
        }
        else
        {
            throw new InvalidOperationException("Исполнение soft завершения потока может быть произведено только в данном потоке.");
        }
    }
}

public class SomeCommand : ICommand
{
    public int Count { get; set; } = 1;

    public void Execute(ServerThread serverThread)
    {
        Console.WriteLine("Исполнение некоторой команды");
        
    }
}

public class LongCommand : ICommand
{
    public int Count { get; set; } = 3;

    public void Execute(ServerThread serverThread)
    {
        Console.WriteLine("Исполнение некоторой длительной команды, count = " + Count);
    }
}


        IScheduler scheduler = new Scheduler();
        ServerThread serverThread = new ServerThread(scheduler);

        scheduler.Add(new SomeCommand());
        scheduler.Add(new SoftStopCommand(serverThread));
        scheduler.Add(new SomeCommand());
        scheduler.Add(new LongCommand());
        scheduler.Add(new HardStopCommand(serverThread));
        scheduler.Add(new SomeCommand());
        serverThread.GetThread().Join();

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.
